% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulate_admixture_until.R
\name{simulate_admixture_until}
\alias{simulate_admixture_until}
\title{Simulate admixture until}
\usage{
simulate_admixture_until(
  input_population_1 = NA,
  input_population_2 = NA,
  pop_size = c(100, 100),
  initial_frequencies = list(c(1, 0), c(0, 1)),
  total_runtime = 100,
  morgan = 1,
  seed = NULL,
  select_matrix = NA,
  markers = NA,
  progress_bar = TRUE,
  track_junctions = FALSE,
  multiplicative_selection = TRUE,
  migration_rate = 0,
  generations_between_update = 100,
  critical_fst = 0.1,
  sampled_individuals = 10,
  number_of_markers = 100,
  random_markers = TRUE
)
}
\arguments{
\item{input_population_1}{Potential earlier simulated population used as
starting point for the simulation. If not provided by the user, the
simulation starts from scratch.}

\item{input_population_2}{Potential earlier simulated population used as
starting point for the simulation. If not provided by the user, the
simulation starts from scratch.}

\item{pop_size}{Vector containing the number of individuals in both
populations.}

\item{initial_frequencies}{A list describing the initial frequency of each
ancestor in each population. Each entry in the list contains a vector with
the frequencies for all ancestor. The length of the vector indicates the
number of unique ancestors. If a vector not summing to 1 is provided, the
vector is normalized.}

\item{total_runtime}{Number of generations}

\item{morgan}{Length of the chromosome in Morgan (e.g. the number of
crossovers during meiosis)}

\item{seed}{Seed of the pseudo-random number generator}

\item{select_matrix}{Selection matrix indicating the markers which are
under selection. If not provided by the user, the simulation proceeds
neutrally. If provided, each row in the matrix should contain five entries:
\code{location}{ location of the marker under selection (in Morgan) }
\code{fitness of wildtype (aa)} \code{fitness of heterozygote (aA)}
\code{fitness of homozygote mutant (AA)} \code{Ancestral type that
represents the mutant allele A}}

\item{markers}{A vector of locations of markers (relative locations in
[0, 1]). If a vector is provided, ancestry at these marker positions is
tracked for every generation.}

\item{progress_bar}{Displays a progress_bar if TRUE. Default value is TRUE}

\item{track_junctions}{Track the average number of junctions over time if
TRUE}

\item{multiplicative_selection}{Default: TRUE. If TRUE, fitness is
calculated for multiple markers by multiplying fitness values for each
marker. If FALSE, fitness is calculated by adding fitness values for each
marker.}

\item{migration_rate}{Rate of migration between the two populations.
Migration is implemented such that with probability m (migration rate) one
of the two parents of a new offspring is from the other population, with
probability 1-m both parents are of the focal population.}

\item{generations_between_update}{The number of generations after which the
simulation has to check again whether the critical Fst value is exceeded}

\item{critical_fst}{The threshold fst value after which the simulations need
to stop.}

\item{sampled_individuals}{Number of individuals to be sampled at random from
the population to estimate Fst}

\item{number_of_markers}{Number of markers to be used to estimate Fst}

\item{random_markers}{Are the markers to estimate Fst randomly distributed,
or regularly distributed? Default is TRUE.}
}
\value{
A list with: \code{Population_1} a population object containing all
individuals in population 1,\code{Population_2} a population object
containing all individuals in population 2, \code{Number_of_generations}
total number of generations required to obtain the cricital fst value,
\code{FST} final FST value.
}
\description{
Individual based simulation of the breakdown of contiguous
ancestry blocks, with or without selection. Two populations are simulated,
and upon userdefined timepoints, genetic divergence between the populations
is checked. If the divergence exceeds a certain threshold, simulation is
stopped.
}
\examples{
\dontrun{
 should generate FST values around 0:
example_pop <- simulate_admixture_until(pop_size = c(100, 100),
                                       initial_frequencies =
                                               list(c(1.0, 1.0),
                                                    c(1.0, 1.0)),
                                       total_runtime = 100,
                                       morgan = 1,
                                       seed = 42,
                                       generations_between_update = 100,
                                       critical_fst = 0.1,
                                       sampled_individuals = 10,
                                       number_of_markers = 100,
                                       random_markers = TRUE)
}
}
